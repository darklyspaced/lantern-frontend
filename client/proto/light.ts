// @generated by protobuf-ts 2.9.0
// @generated from protobuf file "light.proto" (package "light", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MESSAGE_TYPE } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message light.Filter
 */
export interface Filter {
    /**
     * @generated from protobuf field: string status = 1;
     */
    status: string;
    /**
     * @generated from protobuf field: string read = 2;
     */
    read: string;
    /**
     * @generated from protobuf field: string sort_by = 3;
     */
    sortBy: string;
    /**
     * @generated from protobuf field: string sort_order = 4;
     */
    sortOrder: string;
    /**
     * @generated from protobuf field: string source = 5;
     */
    source: string;
}
/**
 * @generated from protobuf message light.PTasks
 */
export interface PTasks {
    /**
     * @generated from protobuf field: string body = 1;
     */
    body: string;
}
/**
 * @generated from protobuf message light.StatusCode
 */
export interface StatusCode {
    /**
     * @generated from protobuf field: bool success = 1;
     */
    success: boolean;
}
// @generated message type with reflection information, may provide speed optimized methods
class Filter$Type extends MessageType<Filter> {
    constructor() {
        super("light.Filter", [
            { no: 1, name: "status", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "read", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "sort_by", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "sort_order", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 5, name: "source", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<Filter>): Filter {
        const message = { status: "", read: "", sortBy: "", sortOrder: "", source: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<Filter>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Filter): Filter {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string status */ 1:
                    message.status = reader.string();
                    break;
                case /* string read */ 2:
                    message.read = reader.string();
                    break;
                case /* string sort_by */ 3:
                    message.sortBy = reader.string();
                    break;
                case /* string sort_order */ 4:
                    message.sortOrder = reader.string();
                    break;
                case /* string source */ 5:
                    message.source = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: Filter, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string status = 1; */
        if (message.status !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.status);
        /* string read = 2; */
        if (message.read !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.read);
        /* string sort_by = 3; */
        if (message.sortBy !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.sortBy);
        /* string sort_order = 4; */
        if (message.sortOrder !== "")
            writer.tag(4, WireType.LengthDelimited).string(message.sortOrder);
        /* string source = 5; */
        if (message.source !== "")
            writer.tag(5, WireType.LengthDelimited).string(message.source);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message light.Filter
 */
export const Filter = new Filter$Type();
// @generated message type with reflection information, may provide speed optimized methods
class PTasks$Type extends MessageType<PTasks> {
    constructor() {
        super("light.PTasks", [
            { no: 1, name: "body", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<PTasks>): PTasks {
        const message = { body: "" };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<PTasks>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: PTasks): PTasks {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string body */ 1:
                    message.body = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: PTasks, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string body = 1; */
        if (message.body !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.body);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message light.PTasks
 */
export const PTasks = new PTasks$Type();
// @generated message type with reflection information, may provide speed optimized methods
class StatusCode$Type extends MessageType<StatusCode> {
    constructor() {
        super("light.StatusCode", [
            { no: 1, name: "success", kind: "scalar", T: 8 /*ScalarType.BOOL*/ }
        ]);
    }
    create(value?: PartialMessage<StatusCode>): StatusCode {
        const message = { success: false };
        globalThis.Object.defineProperty(message, MESSAGE_TYPE, { enumerable: false, value: this });
        if (value !== undefined)
            reflectionMergePartial<StatusCode>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: StatusCode): StatusCode {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* bool success */ 1:
                    message.success = reader.bool();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: StatusCode, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* bool success = 1; */
        if (message.success !== false)
            writer.tag(1, WireType.Varint).bool(message.success);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message light.StatusCode
 */
export const StatusCode = new StatusCode$Type();
/**
 * @generated ServiceType for protobuf service light.Lantern
 */
export const Lantern = new ServiceType("light.Lantern", [
    { name: "GetTasks", options: {}, I: Filter, O: PTasks },
    { name: "AddTasks", options: {}, I: PTasks, O: StatusCode }
]);
